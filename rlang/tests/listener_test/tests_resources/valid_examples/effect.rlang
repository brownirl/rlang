import "class_vocab.json"

Factor f1 := S[0]
Factor f2 := S[1]

Effect single_reward:
    Reward 10

Effect factor_reward:
    Reward f1
    Reward f1

Effect probabilistic_reward:
    with P(0.2):
        Reward 10
    or Reward 1 with P(0.8)

Effect multiple_rewards:
    Reward 10
    Reward 1 with P(0.9)
    or Reward -1 with P(0.1)

Effect conditional_reward:
    Reward 10
    if f1 == 0:
        Reward 5
    elif f1 == 3:
        Reward -5
    else:
        Reward 10

Effect single_transition:
    S' -> S * 2

Effect probabilistic_transition:
    S' -> S * 3 with P(0.5)
    or S' -> S * 2 with P(0.5)

Effect conditional_transition:
    if f1 == 0:
        S' -> S * 3
    elif f1 == 3:
        S' -> S * 2
    else:
        S' -> S with P(0.5)
        or with P(0.3):
            S' -> S * 5

Effect single_predictions:
    f1' -> f1 * 10
    f2' -> S * 2 + 3

Effect compound_predictions:
    f1' -> f1 + f2
    f2' -> f1 * f2 * 2

Effect probabilistic_prediction_a:
    f1' -> f1 * 2 with P(0.25)
    or f1' -> f1 * 3 with P(0.75)

Effect probabilistic_prediction_b:
    with P(0.3):
        f2' -> f2 + 4
    or with P(0.7):
        f1' -> f1 + 6

Effect conditional_prediction:
    if f1 == 0:
        f1' -> f1 * 3
    elif f1 == 3:
        f1' -> f1 * 2
    else:
        f2' -> f2 with P(0.5)
        or with P(0.3):
            f2' -> f2 * 5

Effect simple_effect_references:
    -> single_predictions
    -> single_transition
    -> single_reward
    -> factor_reward

Effect simple_effect_references_overlap:
    -> single_predictions
    -> compound_predictions
    -> single_reward
    -> single_reward

Effect simple_probabilistic_effect_references:
    -> probabilistic_transition with P(0.2)
    -> single_transition with P(0.1)

Effect combined_probabilistic_effect_references:
    with P(0.1):
        -> single_transition
    or -> probabilistic_transition with P(0.2)

Effect conditional_effect_references:
    if f1 == 0:
        -> single_transition
    elif f1 == 3:
        -> probabilistic_transition
    else:
        -> probabilistic_transition with P(0.2)
        or -> single_transition with P(0.1)


Class Color:
	red: int
	green: int
	blue: int

Object red := Color(256, 0, 0)

Effect object_property_conditional:
    if S.color.red == 256:
        Reward 10

Object kuka_arm := Manipulator(5)

Effect object_conditional:
    if S.arm == kuka_arm:
        Reward 15

Effect mixed_object_conditional_probabilistic:
    if S.arm == kuka_arm and S.color.green == 128:
        with P(0.4):
            Reward 12
        or with P(0.6):
            Reward 1
    else:
        Reward S.color.green


Effect state_object_property_prediction:
    if S.color.red == 256:
        S'.color.red -> 128

Effect abstract_object_prediction:
    if S.arm == kuka_arm:
        S'.color -> Color(128, 0, 0)



#Effect jo:
#    if f1 == 0:
#        f1' -> 99 with P(0.5)
#        S' -> S * 2 with P(0.2)
#        or S' -> S * 3 with P(0.8)
#    elif f1 == 3:
#        Reward 10
#        with P(0.2):
#            f1' -> 8
#Effect jo:
#    Reward 10 with P(0.5)
#    with P(0.3):
#        Reward 10
#        f1' -> 3
#    or with P(0.7):
#        -> jo2 with P(0.2)
#
#Effect main:
#    -> jo


#Effect jo2:
#    S' -> S * 5
#    Reward 20
#    f1' -> f2 + 7
#
#Effect jo:
#    S' -> S * 2
#    S' -> S * 4
#    Reward 10
#    Reward 10
#    f2' -> 2
#    f2' -> 2 * f2 + 3
#    f1' -> f2
#    -> jo2

#Effect jo2:
#    if False:
#        f1' -> f1 * 2
#    elif False:
#        f1' -> f1 * 2
#    else:
#        f2' -> f2 * 2

#Effect jo2:
#    if f1 == 0:
#        S' -> S * 2 with P(0.2)
#        or S' -> S * 3 with P(0.8)

#Effect jo2:
#    with P(0.2):
#        Reward 10
#        Reward 10
#    or with P(0.9):
#        Reward 30
#    or Reward 5 with P(0.1)

#Effect:
#    with P(0.5):
#        S' -> S
#    or with P(0.25):
#        S' -> S * 2
#
#Effect jo2:
#    with P(0.2):
#        S' -> S * 2
#    or with P(0.8):
#        with P(0.1):
#            S' -> S * 3
#        or S' -> S * 4 with P(0.9)



#Effect jo:
#    with P(0.1):
#        Reward 0.5
#
#Effect:
#    with P(0.5):
#        if f1 == 1:
#            Reward 10
#        else:
#            Reward 20
#    with P(0.2):
#        Reward 20
#    with P(0.1):
#        -> jo



#Effect:
#    if f1 == [5]:
#        Reward 10
#

#Effect jo:
#    Reward 10
#    Reward 20
#    if f1 == 0:
#        Reward 5
#
#Effect jon:
#    -> jo

#
#Effect:
#    -> jo
#    f1' -> 2
#    f2' -> 6
#    f1' -> 4
#    if f1 == [1]:
#        f1' -> 8
#        f1' -> 8
#        f2' -> 9
#
#Effect:
#    Reward 10
#    Reward 10
#
#
#Effect:
#    Reward 10
#    Reward 10
#    if f1 == 2:
#        S' -> [4]
#
#Effect:
#    if f1 == 1:
#        Reward 10
#        Reward 10
#        S' -> [3]
#
#Effect:
#    if f1 == 1:
#        Reward 20

#Effect:
#    if f2 == 4:
#        -> f1_effect

#Effect:
#    if A == up:
#        S' -> S + [0, 1, 2, 3, 4]

#Effect:
#    if f1 == 3:
#        if f2 == 1:
#            Reward 10
#            Reward 10
#            S' -> [2]
#        if f2 == 1:
#            Reward 10
#            Reward 10
#        elif f2 == 2:
#            Reward 10
#            S' -> [6]


#___ a:
#    if A == up and A != [0, 1]:
#        Reward 10
#
#___ b:
#    if S == [0, 1]:
#        Reward 20
#
#_-_-_:
#    -> a
#    -> b


#Effect:
#    Reward -10
#    if f1 == 1:
#        Reward 20
#        f2' -> 1
#        f1' -> 2
#        S' -> [2, 1]
#    elif f1 == 2:
#        if f2 == 2:
#            Reward 10
#            f2' -> 4
#            S' -> [3, 4]
#        else:
#            Reward 5
#            f2' -> 2
#        if f2 == 2:
#            Reward 10
#            f2' -> 4
#            S' -> [3, 4]
#        else:
#            Reward 5
#            f2' -> 2
